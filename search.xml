<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html标签通过代码隐藏和显示</title>
      <link href="/2019/07/19/html%E6%A0%87%E7%AD%BE%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E9%9A%90%E8%97%8F%E5%92%8C%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/07/19/html%E6%A0%87%E7%AD%BE%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E9%9A%90%E8%97%8F%E5%92%8C%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>工作中我们常常会碰到这个一个需求：<br>当用户进行操作之后，通过在页面上提示信息；</p><p>首先我们在body中定义一个提示信息的元素:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;submitResult&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>然后在script里的用户响应中显示结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//获取submitResult标签并赋值</span><br><span class="line">var submitResult = document.getElementById(&apos;submitResult&apos;);</span><br><span class="line">submitResult.innerHTML = &apos;判题结果：&apos; + data.results;</span><br><span class="line">//显示结果五秒后关闭</span><br><span class="line">$(&apos;#submitResult&apos;).show();</span><br><span class="line">$(&apos;#submitResult&apos;).delay(5000).hide(0);</span><br></pre></td></tr></table></figure><p>至此一个小需求完成了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过css实现按钮高亮</title>
      <link href="/2019/07/01/%E9%80%9A%E8%BF%87css%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E9%AB%98%E4%BA%AE/"/>
      <url>/2019/07/01/%E9%80%9A%E8%BF%87css%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<p>本文通过改变css来实现按钮高亮效果<br>其实高亮只需增加一行代码，如下：<br>原css：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.monaco-workbench &gt; .part.titlebar &gt; .window-controls-container .window-minlogin &#123;</span><br><span class="line">height:100%;</span><br><span class="line">width:45px;</span><br><span class="line">background-color:#1E1E1E;</span><br><span class="line">padding-right: -10px;</span><br><span class="line">margin-right: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这个颜色是1E1E1E（灰色），然后增加一行代码即可，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.monaco-workbench &gt; .part.titlebar &gt; .window-controls-container .window-minlogin:hover &#123;</span><br><span class="line">background-color:#68217A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果<br><img src="css.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS文件相互调用</title>
      <link href="/2019/06/25/JS%E6%96%87%E4%BB%B6%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/"/>
      <url>/2019/06/25/JS%E6%96%87%E4%BB%B6%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>我们在写js代码的时候，常常会碰到两个js文件之间相互调用，直接上代码：<br>messageText.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义数组</span><br><span class="line">var msgArray = [</span><br><span class="line">&#123;name: &apos;In function&apos;,value: &apos;在函数&apos;&#125;,</span><br><span class="line">&#123;name: &apos;was not declared in this scope&apos;,value: &apos;没有在此范围内声明&apos;&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">//定义常量</span><br><span class="line">var messageText = &#123;</span><br><span class="line"></span><br><span class="line">a_name : &apos;张三&apos;,</span><br><span class="line"></span><br><span class="line">b_name : &apos;李四&apos;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">exports.msgArray = msgArray;</span><br><span class="line">exports.messageText = messageText;</span><br></pre></td></tr></table></figure></p><p>在A.js中调用messageText.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const msg_1 = require(&quot;./messageText&quot;);</span><br><span class="line">for(var i=0; i &lt; msg_1.msgArray.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    var message = data1.replace(msg_1.msgArray[i].name, msg_1.msgArray[i].value);</span><br><span class="line">    data1 = message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的例子中，我对data1这个字符串做了一个汉化处理，就是将数组中的name替换成value；<br>如果想要引用B.js中的常量，那么非常简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg_1.messageText.a_name</span><br></pre></td></tr></table></figure></p><p>这样即可得到B.js中a_name中的值了。</p><p>ts文件之间调用用法有些差别，如下：<br>messageText.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export class MessageText &#123;</span><br><span class="line">public static name: string = &apos;张三&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在A.ts中调用js中调用messageText.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; MessageText &#125; from &apos;vs/workbench/api/common/messageText&apos;;//注意form &apos;&apos;是你项目中的目录</span><br><span class="line">console.log(MessageText.name);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过html链接启动电脑软件</title>
      <link href="/2019/06/13/%E9%80%9A%E8%BF%87html%E9%93%BE%E6%8E%A5%E5%90%AF%E5%8A%A8%E7%94%B5%E8%84%91%E8%BD%AF%E4%BB%B6/"/>
      <url>/2019/06/13/%E9%80%9A%E8%BF%87html%E9%93%BE%E6%8E%A5%E5%90%AF%E5%8A%A8%E7%94%B5%E8%84%91%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>我们常常看到通过链接打开电脑上的软件，比如点击迅雷链接打开迅雷软件，这些是怎么实现的呢。<br>简单来说就是：下载软件时，软件会注册命令到我们计算机的注册表里，命令里面填写的是软件所在计算机的路径，因此我们通过调用命令即可启动我们计算机的软件。<br>下面以vscode为例：<br>Ctrl+R打开运行，输入regedit进入注册表，找到vscode的注册命令所在位置，在HKEY_CLASSES_ROOT\vscode<br><img src="20190613170252.png" alt><br>HKEY_CLASSES_ROOT\vscode\shell\open\command里面编辑的就是计算机vscode的所在路径，这些下载软件时计算机都给我们编写好了，我们接下来调用即可。<br>新建一个html，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;vscode://&quot;&gt;打开官方vscode&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>代码中vscode就是注册表中HKEY_CLASSES_ROOT\vscode，这里名称必须保持一样才行。<br>接下来我们打开html，点击链接就可以打开软件了。<br>如果电脑软件没有配置注册表，我们也可以手动给软件配置：<br>在HKEY_CLASSES_ROOT中右击新建项，命名比如test，在test中新建项并命名shell，在shell中新建项命名open，最后在open中新建项命名command，其结构可以参考其他注册表的软件，在command中填入你需要启动的软件应用的路径，如：”C:\Users\user\AppData\Local\Programs\Code.exe”，然后在html里加上<code>&lt;a href=&quot;test://&quot;&gt;打开&lt;/a&gt;</code>即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用session控制web登录退出</title>
      <link href="/2019/06/08/%E4%BD%BF%E7%94%A8session%E6%8E%A7%E5%88%B6web%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/"/>
      <url>/2019/06/08/%E4%BD%BF%E7%94%A8session%E6%8E%A7%E5%88%B6web%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="今天给大家说一个session的问题，首先是session的使用方法："><a href="#今天给大家说一个session的问题，首先是session的使用方法：" class="headerlink" title="今天给大家说一个session的问题，首先是session的使用方法："></a>今天给大家说一个session的问题，首先是session的使用方法：</h2><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><font color="red">&lt;% session().setAttribute(“isLogin”, “true”); %&gt;</font></p><h4 id="获取-逻辑判断"><a href="#获取-逻辑判断" class="headerlink" title="获取/逻辑判断"></a>获取/逻辑判断</h4><p><font color="red">&lt;% session.getAttribute(“isLogin”); %&gt;</font></p><h4 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h4><p><font color="red">&lt;% session.removeAttribute(“isLogin”); %&gt;</font><br>我是这样想的，在登录成功之后给session赋值，然后在主页或别的页面获取session做判断，如果session属性的值为空，那么就是未登录，然后跳转到登录页面，下面按照我自己的想法开始写：<br>首先我在login.jsp中登录之后赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">loginButton = function() &#123;</span><br><span class="line">var id = $(&quot;#id&quot;).val(); //jqury val()方法返回元素value属性</span><br><span class="line">var password = $(&quot;#password&quot;).val();</span><br><span class="line"></span><br><span class="line">if (id == &apos;&apos;) &#123;</span><br><span class="line">$(&quot;#info&quot;).text(&quot;提示：学号不能为空&quot;);</span><br><span class="line">&#125; else if (password == &apos;&apos;) &#123;</span><br><span class="line">$(&quot;#info&quot;).text(&quot;提示：密码不能为空&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type : &quot;POST&quot;,</span><br><span class="line">url : &quot;/books/StudentLoginServlet&quot;,</span><br><span class="line">data : &#123;</span><br><span class="line">id : id,</span><br><span class="line">password : password</span><br><span class="line">&#125;,</span><br><span class="line">dataType : &quot;json&quot;,</span><br><span class="line">success : function(data) &#123;</span><br><span class="line">if (data.code == &quot;000000&quot;) &#123;</span><br><span class="line">                        &lt;% session().setAttribute(&quot;isLogin&quot;, &quot;true&quot;); %&gt;</span><br><span class="line">window.location.href = &quot;home.jsp?id=&quot; + data.data.id;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$(&quot;#info&quot;).text(data.message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后home.jsp判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.print(session.getAttribute(&quot;isLogin&quot;));</span><br><span class="line">if (session.getAttribute(&quot;isLogin&quot;) == null || request.getParameter(&quot;id&quot;) == null)</span><br><span class="line">&#123;</span><br><span class="line">response.sendRedirect(&quot;login.jsp&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String id = request.getParameter(&quot;id&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;div style=&quot;display: flex&quot;&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">欢迎您：&lt;%=id%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;form style=&quot;margin-left: 30px&quot; action=&quot;exitLogin.jsp&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot;&gt;退出&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>最后是退出jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">//session.setAttribute(&quot;isLogin&quot;,null);</span><br><span class="line">   session.removeAttribute(&quot;isLogin&quot;);</span><br><span class="line">   response.sendRedirect(&quot;login.jsp&quot;);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>理论上这样写是可以的，但最终出现非常奇怪的问题，就是第一次登录是没有问题的，但home.jsp点击退出回到login.jsp之后，我直接进入home.jsp，按理是不能进入home的，因为我退出移除了session的”isLogin”属性值，但结果是可以进入home.jsp。<br>这很奇怪，我不知道我存在什么问题，这让我烦恼了半天，我在login.jsp中将session的”isLogin”输出，发现这个session的”isLogin”属性值显示是为null，但点击刷新之后这个session的”isLogin”值为true，然后在home.jsp中发现也是true，为什么会出现这种情况呢？刚开始我猜想是不是没有成功移除，我尝试了session.setAttribute(“isLogin”,null);、session.removeAttribute(“isLogin”);和session.invalidate();</p><h4 id="最后我的解决方法是：去除login-jsp中的-lt-session-setAttribute-“isLogin”-“true”-gt-代码，进入StudentLoginServlet中里面写为：request-getSession-setAttribute-“isLogin”-“true”"><a href="#最后我的解决方法是：去除login-jsp中的-lt-session-setAttribute-“isLogin”-“true”-gt-代码，进入StudentLoginServlet中里面写为：request-getSession-setAttribute-“isLogin”-“true”" class="headerlink" title="最后我的解决方法是：去除login.jsp中的&lt;% session().setAttribute(“isLogin”, “true”); %&gt;代码，进入StudentLoginServlet中里面写为：request.getSession().setAttribute(“isLogin”, “true”);"></a>最后我的解决方法是：去除login.jsp中的<font color="red">&lt;% session().setAttribute(“isLogin”, “true”); %&gt;</font>代码，进入StudentLoginServlet中里面写为：<font color="red">request.getSession().setAttribute(“isLogin”, “true”);</font></h4><p>这样，点击退出之后，session的”isLogin”为null，再刷新也是null，问题终于得到解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql级联更新和级联删除</title>
      <link href="/2019/05/27/sql%E7%BA%A7%E8%81%94%E6%9B%B4%E6%96%B0%E5%92%8C%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4/"/>
      <url>/2019/05/27/sql%E7%BA%A7%E8%81%94%E6%9B%B4%E6%96%B0%E5%92%8C%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>sql级联更新<br>执行更新book表失败<br>后来查找原因是book表被borrow引用了，所以数据库不知道book表更新borrow表要不要更新，所以我们需要进行级联更新，也就是book表更新，borrow表和其它引用了book表也更新外键。<br>book表<br><img src="sql1.png" alt><br>borrow表<br><img src="sql2.png" alt><br>级联更新<br>在创建表时就指定级联更新和级联删除<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`ISBN`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_pub`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sort_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_record`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_price`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_borrow`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ISBN`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`sort_id`</span> (<span class="string">`sort_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`book_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`sort_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`book_sort`</span> (<span class="string">`sort_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`borrow`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`ISBN`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`s_id`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`borrow_date`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`expect_return_date`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`return_date`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_borrow`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`s_id`</span> (<span class="string">`s_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`ISBN`</span> (<span class="string">`ISBN`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`borrow_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`s_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`student`</span> (<span class="string">`s_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`borrow_ibfk_2`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`ISBN`</span>) <span class="keyword">REFERENCES</span> <span class="string">`book`</span> (<span class="string">`ISBN`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure></p><p>如果是已经创建了数据表，那么先撤销外键约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> borrow</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_borrow1 这里为你外键名比如<span class="keyword">constraint</span>后面的名称</span><br></pre></td></tr></table></figure></p><p>然后再重新增加约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_borrow1</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (s_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> student(s_Id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_borrow2</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (ISBN)</span><br><span class="line"><span class="keyword">REFERENCES</span> book(ISBN) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></p><p>最后再执行更新<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> ISBN = <span class="string">'201905152321007'</span>, book_name = <span class="string">'javascript'</span>, book_author = <span class="string">'javascript作者'</span>, book_pub = <span class="string">'javascript出版社'</span>, book_borrow = <span class="number">1</span>, sort_id = <span class="number">1</span>, book_record = <span class="string">'2019-05-24'</span>, book_price = <span class="number">250</span> <span class="keyword">WHERE</span> ISBN = <span class="string">'201905152321001'</span>;</span><br></pre></td></tr></table></figure></p><p>即可成功更新book表，而borrow表中的ISBN也跟着更新。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat无法启动和访问项目出现404</title>
      <link href="/2019/05/19/Tomcat%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%92%8C%E8%AE%BF%E9%97%AE%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0404/"/>
      <url>/2019/05/19/Tomcat%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%92%8C%E8%AE%BF%E9%97%AE%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0404/</url>
      
        <content type="html"><![CDATA[<p>首先我使用的是eclipse工具开发，Tomcat是9.0，之前项目启动使用Tomcat然后访问一直是可以的，昨天开始写Servlet，然后就想访问一下，结果Tomcat启动不起来了，网上大多说web.xml中配置的<url-pattern>路径写的不对，其实如果你是new Servlet，eclipse默认会给你配置，那么配置路径是没有问题的，除非你改了Servlet类名，那么需要手动改一下。下面直接说解决方法：</url-pattern></p><h2 id="Tomcat启动不了"><a href="#Tomcat启动不了" class="headerlink" title="Tomcat启动不了"></a>Tomcat启动不了</h2><p>如果项目（代码）本身没有问题，那么确认server locations中的server path和deply path是否一致，如图<br><img src="Tomcat.jpg" alt><br>我们在server locations中选择第二个，也就是Use Tomcat installation，同时Server Path是你下载Tomcat的路径，Deploy path是你Tomcat的webapps目录路径，我的是：C:\dev\tomcat\apache-tomcat-9.0.2\webapps，选择并保存，图片只显示webapps，但我们一定要选择绝对路径。<br>如果没法选择server locations，那么删除Tomcat重新配置即可选择。</p><h2 id="项目访问为404"><a href="#项目访问为404" class="headerlink" title="项目访问为404"></a>项目访问为404</h2><p>如果你的Tomcat可以访问，项目访问为404，那么很可能是你的项目结构问题，如<a href="http://localhost:8080/books/出现404，那么在web中welcome-file这一项是指定你访问的默认页面，如：" target="_blank" rel="noopener">http://localhost:8080/books/出现404，那么在web中welcome-file这一项是指定你访问的默认页面，如：</a><welcome-file>login.jsp</welcome-file>，那么你访问就是<a href="http://localhost:8080/books/login.jsp，请注意是否存在login.jsp文件，路径是否在webapp目录下。如果仍然出现404，那么可以新建一个工作区试试。" target="_blank" rel="noopener">http://localhost:8080/books/login.jsp，请注意是否存在login.jsp文件，路径是否在webapp目录下。如果仍然出现404，那么可以新建一个工作区试试。</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo不显示本地图片解决方案</title>
      <link href="/2019/05/15/Hexo%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/05/15/Hexo%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>查看主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true还是false，<br>如果是true，那么会创建文章时会自动生成文章同名文件夹，这个看你具体设置。<br>但我发现，如果你设置为true，引用本地图片就是：<br>![](xxxx/图片名.jpg) xxxx为你文件夹名<br>但如果是false，那么你手动新建的同名文件夹，如果<br>![](xxxx/图片名.jpg)无法显示图片，<br>需要改为：<br>![](a.jpg)<br>也就是不用前缀xxxx/，这样虽然在本地markdown无法预览，但部署到远程是看得见的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode二次开发界面篇</title>
      <link href="/2019/05/13/vscode%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E7%95%8C%E9%9D%A2%E7%AF%87/"/>
      <url>/2019/05/13/vscode%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E7%95%8C%E9%9D%A2%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="本文给大家介绍vscode的界面的自定义修改"><a href="#本文给大家介绍vscode的界面的自定义修改" class="headerlink" title="本文给大家介绍vscode的界面的自定义修改"></a>本文给大家介绍vscode的界面的自定义修改</h2><p>首先，先看vsocde界面如图1：</p><p><img src="vscode1.png" alt="图1"></p><p>界面大致可以分为六部分：<br>1.标题栏titlebar 包含其中左边的（包括文件~帮助）为菜单栏menubar<br>2.活动栏activitybar<br>3.侧边栏sidebar<br>4.编辑器editor<br>5.终端及输出等panel<br>6.状态栏statusbar<br>通过分类我们已经清楚了每个部分，接下来我们就动手尝试吧！<br><a id="more"></a></p><h2 id="自定义修改"><a href="#自定义修改" class="headerlink" title="自定义修改"></a>自定义修改</h2><h4 id="修改左上角图标"><a href="#修改左上角图标" class="headerlink" title="修改左上角图标"></a>修改左上角图标</h4><p>其实vsocde本质是一个html页面，所以界面上看到的布局，都是通过div来生成的，那么界面是完全可以自定义的。<br>这里我推荐一种方法：<br>1.打开”切换开发人员工具”，快捷键Ctrl+Shift+I，标题栏-&gt;帮助-&gt;切换开发人员工具；<br>2.这个工具可以更快帮助我们找到修改目标的位置，作用和在页面F12调试是一样的，然后我们可以找到图标的class，如图2；</p><p><img src="vscode2.png" alt="图2"></p><p>3.打开vscodeIDE工具，用IDE打开你要编译的源码；<br>4.用IDE搜索功能，搜索关键词，也就是搜索class，如图3，找到符合的结果；</p><p><img src="vscode3.png" alt="图3"></p><p>5.由下图4可以知道，左上角图标就是svg图片，修改其实就是修改svg图片即可。</p><p><img src="vscode4.jpg" alt="图4"></p><h4 id="活动栏增加文字"><a href="#活动栏增加文字" class="headerlink" title="活动栏增加文字"></a>活动栏增加文字</h4><p>无论要改什么界面，按照这个方法去修改就行。<br>增加图标文字<br>通过这个方法知道搜索出来的结果可能不止一个，比如css文件、ts文件，而ts文件一般是创建这个div，然后再css中进行样式修改，<br>我们通过搜索关键字找到actionbar.ts这个文件，602行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions.forEach(<span class="function">(<span class="params">action: IAction</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> actionItemElement = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">actionItemElement.className = <span class="string">'action-item'</span>;</span><br></pre></td></tr></table></figure><p>我们看到activitybar（活动栏）的一个个图标是由action组成，但这样只能给每一个action添加统一的文字了，我们需要修改以下源码，<br>将actionItemElement.className = ‘action-item’;改成actionItemElement.className = ‘action-item’ + ‘ action-item’ + index;<br>我们为action增加一个动态的class，index是action个数，从0开始，这样第一个action的class就是action-item0，以此类推……<br>接着我们再修改活动栏css样式，在activityaction.css中，我们注释下面这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* .monaco-workbench &gt; .activitybar &gt; .content .monaco-action-bar .action-item:focus:before &#123;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 9px;</span><br><span class="line">height: 32px;</span><br><span class="line">width: 0;</span><br><span class="line">border-left: 2px solid;</span><br><span class="line">&#125; */</span><br></pre></td></tr></table></figure><p>然后给action-item0，1，2……增加样式，css代码为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.monaco-workbench</span> &gt; <span class="selector-class">.activitybar</span> &gt; <span class="selector-class">.content</span> <span class="selector-class">.monaco-action-bar</span> <span class="selector-class">.action-item0</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"文件"</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.monaco-workbench</span> &gt; <span class="selector-class">.activitybar</span> &gt; <span class="selector-class">.content</span> <span class="selector-class">.monaco-action-bar</span> <span class="selector-class">.action-item1</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"管理"</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.monaco-workbench</span> &gt; <span class="selector-class">.activitybar</span> &gt; <span class="selector-class">.content</span> <span class="selector-class">.monaco-action-bar</span> <span class="selector-class">.action-item2</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"调试"</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.monaco-workbench</span> &gt; <span class="selector-class">.activitybar</span> &gt; <span class="selector-class">.content</span> <span class="selector-class">.monaco-action-bar</span> <span class="selector-class">.action-item3</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"扩展"</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">56px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们再修改活动栏的宽度，使之看起来更显眼，可能我们按上一个方法的话找不到宽度和高度这些，<br>我们这一个方法也不是万能的，所以我们需要结合自身的研究，我觉得vscode的命名还是很规范的，所以参考目录结构和命名，<br>我们最终找到一个<font color="red">activitybarpart.css文件，找到第7行：将width修改为70px；</font>然后将源码运行起来。<br>发现，这修改没有生效啊。<br>通过研究vscode启动时它会执行一个布局文件layout.ts，31行定义了ACTIVITY_BAR_WIDTH = 50;<br>看到这里我们知道修改css为什么没有生效了，我们<font color="red">将ACTIVITY_BAR_WIDTH = 50改成ACTIVITY_BAR_WIDTH = 70，</font><br>保证和activitybarpart.css文件中activitybar的width相同;<br>这时我们执行源码发现宽度生效了，当我们将宽度改成70，那么相应的图标文字的宽度也应该改成70，<br>所以<font color="red">将上面css代码中的width: 50px改成width: 70px</font><br>最终结果图5所示</p><p><img src="vscode5.png" alt="图5"></p><h4 id="隐藏菜单栏"><a href="#隐藏菜单栏" class="headerlink" title="隐藏菜单栏"></a>隐藏菜单栏</h4><p>通过vscode设置我们能直接修改菜单栏的显示或隐藏，sidebar显示在左侧还是右侧，但是如果我们想从代码里设置也是可以的，<br>也是通过切换开发人员工具的方法进行关键字搜索，找到vscode主要的设置都是在main.contribution.ts文件里。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'window.menuBarVisibility'</span>: &#123;</span><br><span class="line"><span class="string">'type'</span>: <span class="string">'string'</span>,</span><br><span class="line"><span class="string">'enum'</span>: [<span class="string">'default'</span>, <span class="string">'visible'</span>, <span class="string">'toggle'</span>, <span class="string">'hidden'</span>],</span><br><span class="line"><span class="string">'enumDescriptions'</span>: [</span><br><span class="line">nls.localize(<span class="string">'window.menuBarVisibility.default'</span>, <span class="string">"Menu is only hidden in full screen mode."</span>),</span><br><span class="line">nls.localize(<span class="string">'window.menuBarVisibility.visible'</span>, <span class="string">"Menu is always visible even in full screen mode."</span>),</span><br><span class="line">nls.localize(<span class="string">'window.menuBarVisibility.toggle'</span>, <span class="string">"Menu is hidden but can be displayed via Alt key."</span>),</span><br><span class="line">nls.localize(<span class="string">'window.menuBarVisibility.hidden'</span>, <span class="string">"Menu is always hidden."</span>)</span><br><span class="line">],</span><br><span class="line"><span class="string">'default'</span>: <span class="string">'hidden'</span>,</span><br><span class="line"><span class="string">'scope'</span>: ConfigurationScope.APPLICATION,</span><br><span class="line"><span class="string">'description'</span>: nls.localize(<span class="string">'menuBarVisibility'</span>, <span class="string">"Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen."</span>),</span><br><span class="line"><span class="string">'included'</span>: isWindows || isLinux</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>可以看到菜单栏有4种选项，可以按需求进行默认设置。<br>还有搜索功能的位置，我喜欢放在开发工具的下面和终端一起，可以搜索关键词search.location快速找到search.contribution.ts文件进行修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'search.location'</span>: &#123;</span><br><span class="line">type: <span class="string">'string'</span>,</span><br><span class="line">enum: [<span class="string">'sidebar'</span>, <span class="string">'panel'</span>],</span><br><span class="line"><span class="keyword">default</span>: <span class="string">'panel'</span>,</span><br><span class="line">description: nls.localize(<span class="string">'search.location'</span>, <span class="string">"Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space."</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>还有更多的界面修改，这里我就不一一和大家介绍了，大家可以尽情去探索，本文最重要的就是向大家介绍使用切换开发人员工具的方法进行界面修改，<br>所以关键还是运用方法，不断熟悉vsocde源码目录结构来进行修改，希望能够帮助到有需要的朋友。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP中Http请求实例</title>
      <link href="/2019/05/09/jspHttp%E8%AF%B7%E6%B1%82%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/05/09/jspHttp%E8%AF%B7%E6%B1%82%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="服务端发送请求实例："><a href="#服务端发送请求实例：" class="headerlink" title="服务端发送请求实例："></a>服务端发送请求实例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page <span class="keyword">import</span>=<span class="string">"cn.hutool.json.JSONObject"</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;HTTP 服务端发送请求实例&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;%</span></span><br><span class="line"><span class="regexp">response.setContentType("application/</span>json;charset=utf8<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JSONObject json = new JSONObject();</span></span><br><span class="line"><span class="string">json.put("</span>msg<span class="string">", "</span>hello world<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">out.print(json);</span></span><br><span class="line"><span class="string">%&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用postman作为客户端请求结果："><a href="#使用postman作为客户端请求结果：" class="headerlink" title="使用postman作为客户端请求结果："></a>使用postman作为客户端请求结果：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;msg&quot;: &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端发送请求实例："><a href="#客户端发送请求实例：" class="headerlink" title="客户端发送请求实例："></a>客户端发送请求实例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;HTTP 客户端发送请求实例&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;%</span></span><br><span class="line"><span class="regexp">String username = request.getParameter("username");</span></span><br><span class="line"><span class="regexp">String password = request.getParameter("password");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">out.println("username:" + username);</span></span><br><span class="line"><span class="regexp">out.println("password:" + password);</span></span><br><span class="line"><span class="regexp">%&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求参数：username-zhouhang-amp-password-123456-请求结果："><a href="#请求参数：username-zhouhang-amp-password-123456-请求结果：" class="headerlink" title="请求参数：username=zhouhang&amp;password=123456. 请求结果："></a>请求参数：username=zhouhang&amp;password=123456. 请求结果：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username:zhouhang password:123456.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础使用</title>
      <link href="/2019/05/02/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/05/02/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本文记录简单使用JDBC的教程</p><h2 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h2><p>eclipse、mysql</p><h2 id="mysql建数据库和数据表"><a href="#mysql建数据库和数据表" class="headerlink" title="mysql建数据库和数据表"></a>mysql建数据库和数据表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//创建数据库ZHOUHANG</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ZHOUHANG;</span><br><span class="line"></span><br><span class="line">//使用数据库</span><br><span class="line"><span class="keyword">use</span> ZHOUHANG;</span><br><span class="line"></span><br><span class="line">//创建数据表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`zhou`</span>(<span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">    )<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line">//插入几条数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> zhou <span class="keyword">values</span> (<span class="number">0</span>,<span class="string">"java"</span>),(<span class="number">0</span>,<span class="string">"android"</span>),(<span class="number">0</span>,<span class="string">"小程序"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="java调用JDBC代码如下："><a href="#java调用JDBC代码如下：" class="headerlink" title="java调用JDBC代码如下："></a>java调用JDBC代码如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/ZHOUHANG?serverTimezone=UTC"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"123456"</span>; <span class="comment">//改为你本地数据库的密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>); <span class="comment">//如果你的数据库版本小于8.0.15，那么改成com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="comment">//2. 获得数据库连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="comment">//3.操作数据库，实现增删改查</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">"SELECT id, name FROM zhou"</span>);</span><br><span class="line">        <span class="comment">//如果有数据，rs.next()返回true</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">"name"</span>)+<span class="string">" ID："</span>+rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>因为不是maven项目所以需要手动导包，所以需要在项目lib中加入mysql-connector-java-8.0.15.jar，然后build path中的add即可；<br>不然会报错：找不到”com.mysql.cj.jdbc.Driver”这个类。</p><h2 id="最终输出结果："><a href="#最终输出结果：" class="headerlink" title="最终输出结果："></a>最终输出结果：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java ID：1</span><br><span class="line">android ID：2</span><br><span class="line">小程序 ID：3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署jsp项目到虚拟机服务器上</title>
      <link href="/2019/04/30/%E9%83%A8%E7%BD%B2jsp%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2019/04/30/%E9%83%A8%E7%BD%B2jsp%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>记录如何部署jsp项目到远程虚拟机或者服务器上</p><h4 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h4><p>Xshell6、Xftp6、VMware Workstation</p><h4 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h4><p>需要在VMware Workstation中建立你的虚拟机（相当于服务器），并且开启虚拟机；<br>Xshell中建立会话（配置主机和用户名密码）</p><h4 id="上传jsp项目："><a href="#上传jsp项目：" class="headerlink" title="上传jsp项目："></a>上传jsp项目：</h4><a id="more"></a><p>Xftp6 新建会话，配置主机ip，这和Xshell配置差不多，点击连接，传输到tomcat的同级目录下，<br>进入tomcat的同级目录下，解压jsp项目，cd进入jsp项目，ls查看是否存在pom，然后执行mvn install，<br>会在target下生成war包，然后mv命令移动war包到tomcat的webapps下，<br>通过主机ip加8080加项目名称即可访问。<br>这是静态web项目部署方式，动态web直接将项目放在tomcat的webapp下即可。</p><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><p>主机ip查看：ifconfig<br>开启tomcat服务：./bin/startup.sh    在bin上一级目录<br>关闭服务：./bin/shutdown.sh<br>解压zip：unzip jsp.zip<br>wget 下载<br>tar -xzvf 解压tar</p>]]></content>
      
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js Https请求传递数据</title>
      <link href="/2019/04/24/node-js-Https%E8%AF%B7%E6%B1%82%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/04/24/node-js-Https%E8%AF%B7%E6%B1%82%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="我的代码如下："><a href="#我的代码如下：" class="headerlink" title="我的代码如下："></a>我的代码如下：</h4><h4 id="参考了网上大多说的是req-write-contents-我试了这样写没有效果"><a href="#参考了网上大多说的是req-write-contents-我试了这样写没有效果" class="headerlink" title="参考了网上大多说的是req.write(contents);我试了这样写没有效果"></a>参考了网上大多说的是req.write(contents);我试了这样写没有效果</h4><h4 id="而是在url拼接-contents-来传递数据"><a href="#而是在url拼接-contents-来传递数据" class="headerlink" title="而是在url拼接?contents 来传递数据"></a>而是在url拼接?contents 来传递数据</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import * as https from &quot;https&quot;;</span><br><span class="line">var querystring = require(&apos;querystring&apos;);</span><br><span class="line"></span><br><span class="line">//传递到后台的数据</span><br><span class="line">var data = &quot;1&quot;;</span><br><span class="line">var post_data = &#123; classId: data &#125;;</span><br><span class="line">var contents = querystring.stringify(post_data);</span><br><span class="line"></span><br><span class="line">var options = &#123;</span><br><span class="line">    hostname: &quot;www.baidu.com&quot;,</span><br><span class="line">    port: 443,</span><br><span class="line">    path: &quot;/bfi-web/api/student/course/list_new?&quot; + contents,</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    rejectUnauthorized: false,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        Accept: &quot;*/*&quot;,</span><br><span class="line">        &quot;Accept-Encoding&quot;: &quot;utf-8&quot;,</span><br><span class="line">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8&quot;,</span><br><span class="line">        Connection: &quot;keep-alive&quot;,</span><br><span class="line">        Host: &quot;www.eluzhu.com&quot;,</span><br><span class="line">        token: token,</span><br><span class="line">        version: &quot;2.6&quot;,</span><br><span class="line">        from: &quot;IDE&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var mData = &apos;&apos;;</span><br><span class="line">var req = https.request(options, function (res) &#123;</span><br><span class="line">    res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">    res.on(&quot;data&quot;, function (d) &#123;</span><br><span class="line">        console.log(&apos;===================================data===========&apos; + d);</span><br><span class="line">        mData += d;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(&quot;end&quot;, function () &#123;</span><br><span class="line">        var data = JSON.parse(mData);</span><br><span class="line">        // console.log(&apos;===================================data===========&apos; + mData);</span><br><span class="line">        if (data.code == &quot;000000&quot;) &#123;</span><br><span class="line">            MyTreeProvider.datas = data.data.list;</span><br><span class="line">            MyTreeProvider.initMyTreeList();</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            vscode.window.showInformationMessage(&quot;请求失败：&quot; + data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// req.write(contents);</span><br><span class="line">req.on(&quot;error&quot;, function (e) &#123;</span><br><span class="line">    console.error(&quot;====================================================&quot; + e);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>本文参考来自：<a href="https://www.imooc.com/qadetail/181878" target="_blank" rel="noopener">https://www.imooc.com/qadetail/181878</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js请求https出现乱码解决方案</title>
      <link href="/2019/04/23/node-js%E8%AF%B7%E6%B1%82https%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/04/23/node-js%E8%AF%B7%E6%B1%82https%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h4 id="使用node-js请求https，代码如下："><a href="#使用node-js请求https，代码如下：" class="headerlink" title="使用node.js请求https，代码如下："></a>使用node.js请求https，代码如下：</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">    hostname: &quot;www.baidu.com&quot;,</span><br><span class="line">    port: 443,</span><br><span class="line">    path: &quot;/bfi-web/api/student/course/list_new&quot;,</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    rejectUnauthorized: false,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        Accept: &quot;*/*&quot;,</span><br><span class="line">        &apos;Content-Type&apos;:  &apos;text/html;  charset=utf-8&apos;,</span><br><span class="line">        Connection: &quot;keep-alive&quot;,</span><br><span class="line">        Host: &quot;www.eluzhu.com&quot;,</span><br><span class="line">        //后台定义的header</span><br><span class="line">        token: &quot;&quot;,</span><br><span class="line">        version: &quot;1&quot;,</span><br><span class="line">        from: &quot;IDE&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var req = https.request(options, function(res) &#123;</span><br><span class="line">    console.log(`HEADERS: $&#123;JSON.stringify(res.headers)&#125;`);</span><br><span class="line">    res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">    var mData = &apos;&apos;;</span><br><span class="line">    res.on(&quot;data&quot;, function(d) &#123;</span><br><span class="line">        console.log(&apos;===================================data===========&apos; + d);</span><br><span class="line">        mData += d;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(&quot;end&quot;, function() &#123;</span><br><span class="line">        var data = JSON.parse(mData);</span><br><span class="line">        if (data.code == &quot;000000&quot;) &#123;</span><br><span class="line">            //成功处理</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            vscode.window.showInformationMessage(&quot;请求失败：&quot; + data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br><span class="line">req.on(&quot;error&quot;, function(e) &#123;</span><br><span class="line">    console.error(&quot;====================================================&quot; + e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过控制台查看console.log(`HEADERS: $&#123;JSON.stringify(res.headers)&#125;`)结果，</span><br><span class="line">查看里面是&quot;content-type&quot;:&quot;application/json;charset=utf-8&quot;，可以看到后台定义的格式是utf-8；</span><br><span class="line">这里返回什么格式我们就需要用什么格式去解码。</span><br></pre></td></tr></table></figure><h4 id="最主要方法：res-setEncoding-‘utf-8’"><a href="#最主要方法：res-setEncoding-‘utf-8’" class="headerlink" title="最主要方法：res.setEncoding(‘utf-8’);"></a>最主要方法：res.setEncoding(‘utf-8’);</h4><p>在网上看到好几种解决乱码的方法都没有效，这次碰到问题记录一下，方便以后别人的需要。</p>]]></content>
      
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo显示github图标解决方法</title>
      <link href="/2019/04/20/hexo%E6%98%BE%E7%A4%BAgithub%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/20/hexo%E6%98%BE%E7%A4%BAgithub%E5%9B%BE%E6%A0%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本人使用的是yelee主题<br>我这里总结一下：</p><h2 id="操作一"><a href="#操作一" class="headerlink" title="操作一"></a>操作一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先下载一个github图标，放在/yelee/source/img/目录下，命名为GitHub.png，注意是GitHub，而不是Github和github；</span><br><span class="line">接下来删除在/yelee/source/css/_partial/customise/social-icon.styl的46-50行，然后在img-logo = 添加GitHub white 100。</span><br></pre></td></tr></table></figure><a id="more"></a><p>GitHub white 100 的意思是github添加白色背景且透明度为100，背景可以自行选择<br>hexo clean 清理缓存<br><a href="https://XXX/img/GitHub.png" target="_blank" rel="noopener">https://XXX/img/GitHub.png</a> XXX填入你的仓库地址</p><p>注意：如果按我的方法一步步走，最终会出现github图片，如果hexo s预览出现图片但线上不显示，那么可能你一开始命名的图片名字不同，我由于一开始命名不同，我命名了Github.png了，因此我在通过F12查看，说找不到图片，<a href="https://zhouhangzooo.github.io/img/GitHub.png。">https://zhouhangzooo.github.io/img/GitHub.png。</a><br>这个地址返回的是404，我想可能是我一开始命名的问题了，我试着输入<a href="https://zhouhangzooo.github.io/img/Github.png，">https://zhouhangzooo.github.io/img/Github.png，</a><br>结果果然图片出现了，这个问题和命名标签问题是一样的，对于已经命名好的标签，我们不能去修改，至于为什么我也不知道，但如果修改了，标签下的文章就找不到了，这个不知是不是hexo的机制问题，只认定了初次创建的标签，就算你修改了它指引的地址也不会改变，所以我们尽量不要改标签、标题名字和文件夹名字等。<br>如果和我一样命名出现了错误，可以参考我的解决方法是：先将img目录下的github图片和GitHub white 100 删除，然后执行 hexo clean &amp;&amp; hexo g 命令，再执行 hexo d ，接下来重新执行操作一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的-&gt;用法</title>
      <link href="/2019/04/17/Java%E4%B8%AD%E7%9A%84-%E7%94%A8%E6%B3%95/"/>
      <url>/2019/04/17/Java%E4%B8%AD%E7%9A%84-%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="gt-是lambda表达式，Java8新特性，它的作用是简化匿名函数"><a href="#gt-是lambda表达式，Java8新特性，它的作用是简化匿名函数" class="headerlink" title="-&gt;是lambda表达式，Java8新特性，它的作用是简化匿名函数"></a>-&gt;是lambda表达式，Java8新特性，它的作用是简化匿名函数</h2><a id="more"></a><p>虽说我们可以不用这种写法，但还是需要了解-&gt;的作用，因为可能别人是这样写的；接下来我们通过几个例子了解一下。</p><p>例子：线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//Before Java 8:</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Before Java8 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">//Java 8 way:</span><br><span class="line">new Thread( () -&gt; System.out.println(&quot;In Java8!&quot;) ).start();</span><br></pre></td></tr></table></figure></p><p>例子：排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Before Java 8</span><br><span class="line">private void sortUsingJava7(List&lt;String&gt; names)&#123;</span><br><span class="line">Collections.sort(names, new Comparator&lt;String&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(String s1, String s2) &#123;</span><br><span class="line">return s1.compareTo(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Java 8 way:</span><br><span class="line">private void sortUsingJava8(List&lt;String&gt; names)&#123;</span><br><span class="line">Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例子：监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Before Java 8:</span><br><span class="line">JButton show =  new JButton(&quot;Show&quot;);</span><br><span class="line">show.addActionListener(new ActionListener() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">           System.out.println(&quot;without lambda expression is boring&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Java 8 way:</span><br><span class="line">show.addActionListener((e) -&gt; &#123;</span><br><span class="line">    System.out.println(&quot;Action !! Lambda expressions Rocks&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过上面例子可以看到，-&gt;的作用就是将匿名函数用-&gt;代替，匿名函数如果有输入参数，比如compare(String s1, String s2)，则用(s1,s2)来表示；如果没有输入参数，则用()来表示，然后-&gt;后面写处理结果。</p><h2 id="总结公式：（输入参数-gt-输出参数"><a href="#总结公式：（输入参数-gt-输出参数" class="headerlink" title="总结公式：（输入参数)-&gt;(输出参数)"></a>总结公式：（输入参数)-&gt;(输出参数)</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript定义全局变量供其他ts文件使用</title>
      <link href="/2019/04/16/typeScript%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BE%9B%E5%85%B6%E4%BB%96ts%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/16/typeScript%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%BE%9B%E5%85%B6%E4%BB%96ts%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h2><p>先在ts中定义一个模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export module FileModule &#123;</span><br><span class="line">export var flag: boolean = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在另一个ts文件中引入模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; FileModule &#125; from &apos;定义ts模块路径&apos;; //格式如下：vs/workbench/parts/files/electron-browser/fileActions</span><br></pre></td></tr></table></figure></p><p>接着就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileModule.flag = true;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="全局常用变量可以新建一个ts文件"><a href="#全局常用变量可以新建一个ts文件" class="headerlink" title="全局常用变量可以新建一个ts文件"></a>全局常用变量可以新建一个ts文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export class MessageText &#123;</span><br><span class="line"></span><br><span class="line">public static Error_identifier: string = &apos;identifier&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_isundefined: string = &apos;is undefined&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedAnExpression: string = &apos;expected an expression&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_unrecognizedPreprocessingDirective: string = &apos;unrecognized preprocessing directive&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedAFileName: string = &apos;expected a file name&apos;;</span><br><span class="line"></span><br><span class="line">public static Error_expectedA: string = &quot;expected a &apos;;&apos;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; MessageText &#125; from &apos;vs/workbench/api/node/messageText&apos;;</span><br><span class="line">MessageText.Error_identifier</span><br></pre></td></tr></table></figure><p>MessageText.Error_identifier 相当于’identifier’</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的then()用法</title>
      <link href="/2019/04/13/JavaScript%E7%9A%84then-%E7%94%A8%E6%B3%95/"/>
      <url>/2019/04/13/JavaScript%E7%9A%84then-%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>昨天做项目碰到一个问题：要执行A方法，方法里面有写入文件的耗时操作，然后我想等A方法执行完了再执行B方法，因此我们可以用js特有的then()方法，那么它可以帮我们完成这个问题。<br>封装A方法为函数，A方法：vscode.commands.executeCommand(‘workbench.action.files.newUntitledFile’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const p = function()&#123;</span><br><span class="line">return vscode.commands.executeCommand(&apos;workbench.action.files.newUntitledFile&apos;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再执行B方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p().then(val =&gt; &#123;</span><br><span class="line">vscode.commands.executeCommand(&quot;extension.demo.openWebview&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件调用源码功能</title>
      <link href="/2019/04/10/vscode%E6%8F%92%E4%BB%B6%E4%B8%8E%E6%BA%90%E7%A0%81%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/04/10/vscode%E6%8F%92%E4%BB%B6%E4%B8%8E%E6%BA%90%E7%A0%81%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>本文讲述一下vscode插件和源码通过命令进行通信<br>在之前”vscode插件与webview相互通信”文章中，讲述webview和插件进行通信，里面有个注册命令，之前文章没有详细代码，其实代码vscoode官网都有，</p><h2 id="接下来要说命令，那么先贴一下注册命令的代码"><a href="#接下来要说命令，那么先贴一下注册命令的代码" class="headerlink" title="接下来要说命令，那么先贴一下注册命令的代码"></a>接下来要说命令，那么先贴一下注册命令的代码</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">context.subscriptions.push(vscode.commands.registerCommand(&apos;extension.demo.openWebview&apos;, function (uri) &#123;</span><br><span class="line">//这个uri就是传递过来的参数，无论是vscode插件和webview通信还是vscode插件和vscode源码通信都可以通过这个进行数据传递</span><br><span class="line">        if (flag) &#123;//判断flag让webview不重复打开</span><br><span class="line">if(value == undefined) &#123; //如果是第一次打开课程</span><br><span class="line">value = uri;</span><br><span class="line">panel.webview.postMessage(&#123; command: &quot;course_id&quot;,text: value&#125;);</span><br><span class="line">&#125;</span><br><span class="line">else if (value != undefined &amp;&amp; value == uri) &#123; //如果重复点击</span><br><span class="line">return;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">value = uri;</span><br><span class="line">panel.webview.postMessage(&#123; command: &quot;course_id&quot;,text: value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">value = uri;</span><br><span class="line">panel = vscode.window.createWebviewPanel(</span><br><span class="line">&apos;testWebview&apos;, // viewType</span><br><span class="line">&quot;课程提示&quot;, // 视图标题</span><br><span class="line">2, // 显示在编辑器的哪个部位</span><br><span class="line">&#123;</span><br><span class="line">enableScripts: true, // 启用JS，默认禁用</span><br><span class="line">retainContextWhenHidden: true, // webview被隐藏时保持状态，避免被重置</span><br><span class="line">enableFindWidget: true,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">flag = true;</span><br><span class="line"></span><br><span class="line">panel.webview.html = getWebViewContent(context, &apos;src/test-webview.html&apos;);</span><br><span class="line">        //发送消息到webview</span><br><span class="line">if (value !== undefined &amp;&amp; value !== &quot;&quot;) &#123;</span><br><span class="line">panel.webview.postMessage(&#123; command: value &#125;);</span><br><span class="line">&#125;</span><br><span class="line">panel.webview.onDidReceiveMessage(message =&gt; &#123;</span><br><span class="line">//接收命令</span><br><span class="line">            switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line">case &apos;openHint&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;, undefined, context.subscriptions);</span><br><span class="line"></span><br><span class="line">//当webview被关闭时，设置标识，就可以重新打开webview</span><br><span class="line">panel.onDidDispose(</span><br><span class="line">() =&gt; &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">console.log(&apos;===============================close-webview&apos;);</span><br><span class="line">&#125;, null, context.subscriptions);</span><br><span class="line"></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">function getWebViewContent(context, templatePath) &#123;</span><br><span class="line">const resourcePath = util.getExtensionFileAbsolutePath(context, templatePath);</span><br><span class="line">const dirPath = path.dirname(resourcePath);</span><br><span class="line">let html = fs.readFileSync(resourcePath, &apos;utf-8&apos;);</span><br><span class="line">// vscode不支持直接加载本地资源，需要替换成其专有路径格式，这里只是简单的将样式和JS的路径替换</span><br><span class="line">html = html.replace(/(&lt;link.+?href=&quot;|&lt;script.+?src=&quot;|&lt;img.+?src=&quot;)(.+?)&quot;/g, (m, $1, $2) =&gt; &#123;</span><br><span class="line">return $1 + vscode.Uri.file(path.resolve(dirPath, $2)).with(&#123;</span><br><span class="line">scheme: &apos;vscode-resource&apos;</span><br><span class="line">&#125;).toString() + &apos;&quot;&apos;;</span><br><span class="line">&#125;);</span><br><span class="line">return html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webview页面"><a href="#webview页面" class="headerlink" title="webview页面"></a>webview页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">window.addEventListener(&apos;message&apos;, event =&gt; &#123;</span><br><span class="line">        const message = event.data;</span><br><span class="line">        if(message.command != &quot;course_id&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        courseId = message.text;</span><br><span class="line">        // console.log(&quot;==================================courseId&quot;  + courseId);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><pre><code>&lt;div&gt;    onclick=&quot;openHint()&quot;&lt;/div&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function openHint() &#123;</span><br><span class="line">    vscode.postMessage(&#123;</span><br><span class="line">        command: &apos;openHint&apos;,</span><br><span class="line">        text: &apos;试着输入 helloword &apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的代码，其实和官方差不多，上面代码是注册了命令，通过命令打开webveiw，其实就是打开了src目录下的test-webview.html页面，这个html我们可以自定义，同时页面可以传输数据到这里然后panel.webview.onDidReceiveMessage接收并处理。</p><h2 id="当我们想要传输数据到webivew时"><a href="#当我们想要传输数据到webivew时" class="headerlink" title="当我们想要传输数据到webivew时"></a>当我们想要传输数据到webivew时</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vscode.commands.executeCommand(&quot;extension.demo.openWebview&quot;,&quot;需要传输的数据&quot;);</span><br></pre></td></tr></table></figure><p>这样通过命令我们就可以将数据传输到webview页面上了，那么我们试试和源码进行交互</p><h2 id="思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl-N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件"><a href="#思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl-N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件" class="headerlink" title="思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl+N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件"></a>思考：源码中肯定有实现新建文件，而它给我们提供快捷键Ctrl+N打开，所以vscode源码中肯定有一个新建文件的命令，我们只需执行它，便可以新建文件</h2><p>根据我的研究，源码的功能，绝大部分源码实现方法在XXService.ts中，而你想要调用它，那么方法在XXActions.ts中。<br>我们查看一个例子：fileActions.ts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export class GlobalNewUntitledFileAction extends Action &#123;</span><br><span class="line">public static readonly ID = &apos;workbench.action.files.newUntitledFile&apos;;</span><br><span class="line">public static readonly LABEL = nls.localize(&apos;newUntitledFile&apos;, &quot;New Untitled File&quot;);</span><br><span class="line"></span><br><span class="line">constructor(</span><br><span class="line">id: string,</span><br><span class="line">label: string,</span><br><span class="line">@IEditorService private readonly editorService: IEditorService</span><br><span class="line">) &#123;</span><br><span class="line">super(id, label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public run(): Promise&lt;any&gt; &#123;</span><br><span class="line"></span><br><span class="line"> return this.editorService.openEditor(&#123; resource: resources.joinPath(lastDir, untitledFileName), options: &#123; pinned: true &#125; &#125; as IUntitledResourceInput); // untitled are always pinned</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public run(): Promise&lt;any&gt; &#123;</span><br><span class="line"> return this.editorService.openEditor(&#123; options: &#123; pinned: true &#125; &#125; as IUntitledResourceInput); // untitled are always pinned</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是vsocde源码中代码，可以看到最终运行run即可新建文件，我们一步步找，可以看到官方调用run方法是通过actions.ts文件中的接口方法，通过一个参数继承这个接口，然后参数调用里面的方法实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export interface IActionRunner extends IDisposable &#123;</span><br><span class="line">run(action: IAction, context?: any): Promise&lt;any&gt;;</span><br><span class="line">onDidRun: Event&lt;IRunEvent&gt;;</span><br><span class="line">onDidBeforeRun: Event&lt;IRunEvent&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而我们如果想要在插件中实现新建文件，那么我们只需要执行命令即可，命令就是XXAction的id，比如新建文件的命令就是GlobalNewUntitledFileAction.ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as vscode from &quot;vscode&quot;;</span><br><span class="line">vscode.commands.executeCommand(&apos;workbench.action.files.newUntitledFile&apos;);</span><br></pre></td></tr></table></figure></p><p>因此，vscode所有快捷键的功能我们都可以通过执行命令来实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git最实用命令总结</title>
      <link href="/2019/04/06/git%E6%9C%80%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/06/git%E6%9C%80%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="github第一次上传项目"><a href="#github第一次上传项目" class="headerlink" title="github第一次上传项目"></a>github第一次上传项目</h2><p>进入上传项目的文件夹里，右击选择==Git Bash Here==（如果没有需要下载git工具）依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 你的远程仓库地址</span><br><span class="line">git add .保存本地代码</span><br><span class="line">git commit -m &quot;提交信息&quot;本地代码提交</span><br><span class="line">git push 或者 git push origin master本地代码提交到远程仓库</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果提示使用git push origin master，那么很可能是没有设置git账号和密码，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p><p>然后下次git就不用重复输入用户名和密码了</p><h2 id="以后上传时执行命令"><a href="#以后上传时执行命令" class="headerlink" title="以后上传时执行命令"></a>以后上传时执行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="获取远程项目"><a href="#获取远程项目" class="headerlink" title="获取远程项目"></a>获取远程项目</h2><p>如果是多个开发者维护的项目，同事进行了上传了自己的代码到远程项目，而我们为了保持项目一致性，时常需要进行项目更新<br>3-1：如果我们本地没有修改项目，我们可以直接拉取更新的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p><p>3-2：很多时候我们都会对本地项目进行一些更改，那么我们需要保存本地项目，然后再更新远程项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>通常我们不建议使用==git add .==，因为这样会将我们项目所有文件进行提交，我们建议只提交你修改的文件或文件夹，比如提交src文件夹，可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add src</span><br></pre></td></tr></table></figure></p><p>如果和别人都修改了相同的代码，那么很可能会产生冲突，解决冲突的方法有很多，我们这里推荐一种比较简单常用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash 保存</span><br><span class="line">git pull</span><br><span class="line">git stash pop 合并</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>我们需要先保存自己代码，然后拉取别人的代码，进行合并，然后再上传（解决完冲突之后最好上传一下，免得别人还碰上冲突）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github提交没有贡献解决方案</title>
      <link href="/2019/04/05/github%E6%8F%90%E4%BA%A4%E6%B2%A1%E6%9C%89%E8%B4%A1%E7%8C%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/04/05/github%E6%8F%90%E4%BA%A4%E6%B2%A1%E6%9C%89%E8%B4%A1%E7%8C%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><code>清明时节雨无声，编程路上继续行。</code></p><p>前几天在github提交代码，发现没有显示贡献，于是查找原因顺便记录一下：原因可能是提交时的邮箱和github账号的邮箱不一致。</p><h2 id="检查自己的emal是否正确"><a href="#检查自己的emal是否正确" class="headerlink" title="检查自己的emal是否正确"></a>检查自己的emal是否正确</h2><p>git config –global user.email 回车</p><h2 id="设置邮箱名和名字"><a href="#设置邮箱名和名字" class="headerlink" title="设置邮箱名和名字"></a>设置邮箱名和名字</h2><p>git config –global user.name “你的名字”<br>git config –global user.email “你的邮箱” 如<a href="mailto:XXXX@163.com" target="_blank" rel="noopener">XXXX@163.com</a><br>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode调试vue项目</title>
      <link href="/2019/04/04/vscode%E8%B0%83%E8%AF%95vue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/04/04/vscode%E8%B0%83%E8%AF%95vue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Debugger-for-Chrome插件"><a href="#安装Debugger-for-Chrome插件" class="headerlink" title="安装Debugger for Chrome插件"></a>安装Debugger for Chrome插件</h2><p>找到“扩展”或者按快捷键“Ctrl+Shift+X”，输入Debugger for Chrome查找，并安装。</p><h2 id="配置chrome到launch-json中"><a href="#配置chrome到launch-json中" class="headerlink" title="配置chrome到launch.json中"></a>配置chrome到launch.json中</h2><p>然后打开“调试”或者快捷键“Ctrl+Shift+D”，点击配置按钮Open launch.json，弹出选项中选择Chrome，然后会创建并打开launch.json文件，将里面的内容替换成一下内容，默认内容是下面的内容<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;chrome&quot;,</span><br><span class="line">        &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;vuejs: chrome&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http://localhost:8080&quot;,</span><br><span class="line">        &quot;webRoot&quot;: &quot;$&#123;workspaceFolder&#125;/src&quot;,</span><br><span class="line">        &quot;breakOnLoad&quot;: true,</span><br><span class="line">        &quot;sourceMapPathOverrides&quot;: &#123;</span><br><span class="line">          &quot;webpack:///./src/*&quot;: &quot;$&#123;webRoot&#125;/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="在终端运行命令npm-run-dev"><a href="#在终端运行命令npm-run-dev" class="headerlink" title="在终端运行命令npm run dev"></a>在终端运行命令npm run dev</h2><p>方法一（推荐）：直接快捷键”Ctrl+`“打开终端，运行命令npm run dev，然后直接F5即可打开chrome浏览器调试；<br>方法二：可以在vscode中右击vue项目的根目录，比如src，Open in Terminal（打开终端），然后再输入cd ..，回退到vue项目的根目录，我们的目的是让终端在项目的根目录上，然后就可以运行命令npm run dev，然后点击调试功能中的绿色箭头开启调试即可打开chrome浏览器调试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\eluzhu\Desktop\项目\test\src&gt; cd ..</span><br><span class="line">PS C:\Users\eluzhu\Desktop\项目\test&gt; npm run dev</span><br></pre></td></tr></table></figure></p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>直接在你想要查看的代码第几行左侧添加断点，设置成功可以看到比如200行左侧出现红点，至此断点调试就完成了。<br>另外，默认vscode对vue没有代码高亮支持，可以下载Vetur插件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件与webview相互通信</title>
      <link href="/2019/04/03/vscode%E6%8F%92%E4%BB%B6%E4%B8%8Ewebview%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/04/03/vscode%E6%8F%92%E4%BB%B6%E4%B8%8Ewebview%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="webview发送消息给插件"><a href="#webview发送消息给插件" class="headerlink" title="webview发送消息给插件"></a>webview发送消息给插件</h2><p>插件js和ts都可以（webview需要引入vscode，可以通过<script src="../src/test-webview.js"></script>）<br>然后test-webview.js里面加入const testMode = false; const vscode = testMode ? {} : acquireVsCodeApi();</p><p>webview发送消息<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function openHint() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openHint&apos;,</span><br><span class="line">text: &apos;试着输入 helloword &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function openNext() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openNext&apos;,</span><br><span class="line">text: &apos;准备好进入下一关了么？ &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function openCheck() &#123;</span><br><span class="line">vscode.postMessage(&#123;</span><br><span class="line">command: &apos;openCheck&apos;,</span><br><span class="line">text: &apos;恭喜你，回答正确！！！ &apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>插件接收消息并处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">panel.webview.onDidReceiveMessage(message =&gt; &#123;</span><br><span class="line">switch (message.command) &#123;</span><br><span class="line"></span><br><span class="line">case &apos;openHint&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &apos;openNext&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line"> modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &apos;openCheck&apos;:</span><br><span class="line">vscode.window.showInformationMessage(message.text, &#123;</span><br><span class="line">modal: true</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, undefined, context.subscriptions);</span><br></pre></td></tr></table></figure></p><p>最终结果点击按钮在vscode中弹出框</p><h2 id="插件发送消息给webview"><a href="#插件发送消息给webview" class="headerlink" title="插件发送消息给webview"></a>插件发送消息给webview</h2><p>在创建webview的时候，创建panel的时候利用panel发送消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var panel;</span><br><span class="line">panel.webview.postMessage(&#123; command: value &#125;);</span><br></pre></td></tr></table></figure></p><p>webview接收数据并处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, event =&gt; &#123;</span><br><span class="line">const message = event.data;</span><br><span class="line">if (message.command == undefined || !message.command) &#123;</span><br><span class="line">// console.log(&apos;---------------------------message：aaaa&apos;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// console.log(&apos;---------------------------message：&apos; + message.command);</span><br><span class="line">courseId = message.command;</span><br><span class="line">//下面可以作自己的处理</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
